<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Company Profile Generator</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="container">
    <header>
      <h1>🏢 Company Profile Generator</h1>
      <p class="subtitle">Generate comprehensive company profiles using AI</p>
    </header>

    <main>
      <% if error %>
        <div class="alert alert-error">
          <strong>Error:</strong> <%= error %>
        </div>
      <% end %>

      <div class="card">
        <form action="/generate" method="post" id="generate-form">
          <div class="form-group">
            <label for="company_name">Company Name *</label>
            <input 
              type="text" 
              id="company_name" 
              name="company_name" 
              placeholder="e.g., Stripe, Shopify, OpenAI"
              required
              autofocus
            >
          </div>

          <div class="form-group">
            <label for="website">Website (Optional)</label>
            <input 
              type="url" 
              id="website" 
              name="website" 
              placeholder="e.g., https://example.com"
            >
          </div>

          <button type="submit" class="btn btn-primary">
            Generate Profile
          </button>
        </form>
      </div>

      <!-- Progress Container (initially hidden) -->
      <div id="progress-container" class="card" style="display: none;">
        <div class="progress-header">
          <h2>Generating Profile...</h2>
          <p class="progress-company-name"></p>
        </div>

        <div class="progress-bar-container">
          <div class="progress-bar">
            <div class="progress-bar-fill" id="progress-bar-fill"></div>
          </div>
          <div class="progress-text">
            <span id="progress-percentage">0%</span>
            <span id="progress-status">Starting...</span>
          </div>
        </div>

        <div class="sections-progress" id="sections-progress">
          <!-- Section progress items will be inserted here -->
        </div>
      </div>

      <!-- Profile Results Container -->
      <div id="results-container" style="display: none;">
        <div class="card">
          <div class="profile-meta">
            <strong id="result-company-name"></strong>
            <span id="result-website"></span>
          </div>
        </div>

        <div class="profile-sections" id="profile-sections">
          <!-- Profile sections will be inserted here -->
        </div>

        <div class="actions">
          <button class="btn btn-secondary" onclick="toggleAllSections()">
            📂 Toggle All Sections
          </button>
          <button class="btn btn-primary" onclick="window.location.reload()">
            Generate Another Profile
          </button>
        </div>
      </div>

      <div class="features">
        <h2>What gets generated?</h2>
        <div class="features-grid">
          <div class="feature-item">
            <div class="feature-icon">📖</div>
            <h3>Their Story</h3>
            <p>Origin story and founding narrative</p>
          </div>
          <div class="feature-item">
            <div class="feature-icon">💎</div>
            <h3>Company Values</h3>
            <p>Core values and cultural principles</p>
          </div>
          <div class="feature-item">
            <div class="feature-icon">📝</div>
            <h3>Description</h3>
            <p>Comprehensive company overview</p>
          </div>
          <div class="feature-item">
            <div class="feature-icon">👥</div>
            <h3>Leadership</h3>
            <p>Key executives and team information</p>
          </div>
          <div class="feature-item">
            <div class="feature-icon">💰</div>
            <h3>Funding</h3>
            <p>Investment rounds and financial data</p>
          </div>
          <div class="feature-item">
            <div class="feature-icon">📊</div>
            <h3>Key Numbers</h3>
            <p>Important metrics and statistics</p>
          </div>
          <div class="feature-item">
            <div class="feature-icon">🏢</div>
            <h3>Office Locations</h3>
            <p>Physical presence and offices</p>
          </div>
          <div class="feature-item">
            <div class="feature-icon">🎁</div>
            <h3>Perks & Benefits</h3>
            <p>Employee benefits and perks</p>
          </div>
          <div class="feature-item">
            <div class="feature-icon">🌍</div>
            <h3>Remote Policy</h3>
            <p>Remote work policies and flexibility</p>
          </div>
        </div>
      </div>
    </main>

    <footer>
      <p>Powered by Claude (Sonnet 4) | Built with Ruby & Sinatra</p>
    </footer>
  </div>

  <script>
    const form = document.getElementById('generate-form');
    const progressContainer = document.getElementById('progress-container');
    const resultsContainer = document.getElementById('results-container');
    const sectionsProgress = document.getElementById('sections-progress');
    const profileSections = document.getElementById('profile-sections');
    const progressBarFill = document.getElementById('progress-bar-fill');
    const progressPercentage = document.getElementById('progress-percentage');
    const progressStatus = document.getElementById('progress-status');

    const sectionOrder = [
      'their_story', 'company_values', 'company_description',
      'leadership', 'funding_parser', 'key_numbers',
      'office_locations', 'perks_and_benefits', 'remote_policy'
    ];

    let sectionsData = {};
    let totalSections = 0;

    form.addEventListener('submit', async function(e) {
      e.preventDefault();

      const companyName = document.getElementById('company_name').value.trim();
      const website = document.getElementById('website').value.trim();

      if (!companyName) {
        alert('Company name is required');
        return;
      }

      // Hide form, show progress
      form.parentElement.style.display = 'none';
      progressContainer.style.display = 'block';
      document.querySelector('.progress-company-name').textContent = companyName;
      document.querySelector('.features').style.display = 'none';

      // Reset state
      sectionsProgress.innerHTML = '';
      profileSections.innerHTML = '';
      sectionsData = {};
      totalSections = sectionOrder.length;

      // Initialize section progress items
      sectionOrder.forEach(section => {
        const sectionDiv = createSectionProgressItem(section);
        sectionsProgress.appendChild(sectionDiv);
      });

      try {
        // Start async generation
        const response = await fetch('/generate/async', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            company_name: companyName,
            website: website
          })
        });

        const data = await response.json();
        
        if (!data.success) {
          throw new Error(data.error || 'Failed to start generation');
        }

        // Connect to SSE stream
        const eventSource = new EventSource(`/generate/stream/${data.session_id}`);

        eventSource.addEventListener('section_update', (e) => {
          const update = JSON.parse(e.data);
          handleSectionUpdate(update);
        });

        eventSource.addEventListener('complete', (e) => {
          const result = JSON.parse(e.data);
          handleComplete(companyName, website);
          eventSource.close();
        });

        eventSource.addEventListener('error', (e) => {
          let error = 'An error occurred during generation';
          try {
            const errorData = JSON.parse(e.data);
            error = errorData.error || error;
          } catch {}
          handleError(error);
          eventSource.close();
        });

        eventSource.onerror = () => {
          // Connection error
          handleError('Connection lost. Please try again.');
          eventSource.close();
        };

      } catch (error) {
        handleError(error.message);
      }
    });

    function createSectionProgressItem(sectionName) {
      const div = document.createElement('div');
      div.className = 'section-progress-item';
      div.id = `section-${sectionName}`;
      div.innerHTML = `
        <div class="section-status-icon">⏳</div>
        <div class="section-info">
          <div class="section-name">${humanizeSectionName(sectionName)}</div>
          <div class="section-status">Pending...</div>
        </div>
      `;
      return div;
    }

    function handleSectionUpdate(update) {
      const { section_name, status, content, humanized_name, error } = update;
      
      sectionsData[section_name] = { status, content, humanized_name, error };

      const sectionDiv = document.getElementById(`section-${section_name}`);
      if (!sectionDiv) return;

      const icon = sectionDiv.querySelector('.section-status-icon');
      const statusText = sectionDiv.querySelector('.section-status');

      // Update icon and status
      switch (status) {
        case 'pending':
          icon.textContent = '⏳';
          statusText.textContent = 'Pending...';
          sectionDiv.classList.remove('in-progress', 'completed', 'failed');
          sectionDiv.classList.add('pending');
          break;
        case 'in_progress':
          icon.textContent = '🔄';
          statusText.textContent = 'Generating...';
          sectionDiv.classList.remove('pending', 'completed', 'failed');
          sectionDiv.classList.add('in-progress');
          break;
        case 'completed':
          icon.textContent = '✅';
          statusText.textContent = 'Completed';
          sectionDiv.classList.remove('pending', 'in-progress', 'failed');
          sectionDiv.classList.add('completed');
          
          // Add section to results (only if we have content)
          if (content) {
            addSectionToResults(section_name, humanized_name, content);
          }
          break;
        case 'failed':
          icon.textContent = '❌';
          statusText.textContent = `Failed: ${error || 'Unknown error'}`;
          sectionDiv.classList.remove('pending', 'in-progress', 'completed');
          sectionDiv.classList.add('failed');
          break;
      }

      updateProgress();
    }

    function updateProgress() {
      const completed = Object.values(sectionsData).filter(s => s.status === 'completed').length;
      const failed = Object.values(sectionsData).filter(s => s.status === 'failed').length;
      const inProgress = Object.values(sectionsData).filter(s => s.status === 'in_progress').length;
      
      const percentage = Math.round((completed / totalSections) * 100);
      progressBarFill.style.width = `${percentage}%`;
      progressPercentage.textContent = `${percentage}%`;

      if (inProgress > 0) {
        progressStatus.textContent = `${completed}/${totalSections} sections completed`;
      } else if (completed === totalSections) {
        progressStatus.textContent = 'All sections completed!';
      } else {
        progressStatus.textContent = `${completed}/${totalSections} completed, ${failed} failed`;
      }
    }

    function addSectionToResults(sectionName, humanizedName, content) {
      // Check if section already exists
      if (document.getElementById(`result-section-${sectionName}`)) {
        return;
      }

      const sectionCard = document.createElement('div');
      sectionCard.className = 'card section-card';
      sectionCard.id = `result-section-${sectionName}`;
      sectionCard.innerHTML = `
        <div class="section-header section-header-toggle" onclick="toggleSection('${sectionName}')">
          <h2>${humanizedName || humanizeSectionName(sectionName)}</h2>
          <div class="section-header-right">
            <span class="section-badge">${sectionName}</span>
            <span class="section-toggle-icon" id="toggle-icon-${sectionName}">▼</span>
          </div>
        </div>
        <div class="section-content" id="content-${sectionName}">
          ${content}
        </div>
      `;
      
      profileSections.appendChild(sectionCard);
      
      // Show results container if hidden
      if (resultsContainer.style.display === 'none') {
        resultsContainer.style.display = 'block';
      }
    }

    function handleComplete(companyName, website) {
      progressStatus.textContent = 'Profile generation complete!';
      
      // Update result header
      document.getElementById('result-company-name').textContent = companyName;
      if (website) {
        document.getElementById('result-website').innerHTML = ` | <a href="${website}" target="_blank">${website}</a>`;
      }

      // Scroll to results
      setTimeout(() => {
        resultsContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }, 500);
    }

    function handleError(error) {
      progressContainer.innerHTML = `
        <div class="alert alert-error">
          <strong>Error:</strong> ${error}
        </div>
        <button class="btn btn-primary" onclick="window.location.reload()">
          Try Again
        </button>
      `;
    }

    function humanizeSectionName(sectionName) {
      return sectionName
        .replace(/_/g, ' ')
        .split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
    }

    function toggleSection(sectionName) {
      const content = document.getElementById(`content-${sectionName}`);
      const icon = document.getElementById(`toggle-icon-${sectionName}`);
      
      if (content.style.display === 'none') {
        content.style.display = 'block';
        icon.textContent = '▼';
        icon.classList.remove('collapsed');
      } else {
        content.style.display = 'none';
        icon.textContent = '▶';
        icon.classList.add('collapsed');
      }
    }

    function toggleAllSections() {
      const allContents = document.querySelectorAll('.section-content');
      const allIcons = document.querySelectorAll('.section-toggle-icon');
      const anyExpanded = Array.from(allContents).some(content => content.style.display !== 'none');
      
      allContents.forEach(content => {
        content.style.display = anyExpanded ? 'none' : 'block';
      });
      
      allIcons.forEach(icon => {
        icon.textContent = anyExpanded ? '▶' : '▼';
        if (anyExpanded) {
          icon.classList.add('collapsed');
        } else {
          icon.classList.remove('collapsed');
        }
      });
    }
  </script>
</body>
</html>
